import { NextResponse } from 'next/server';
import { verifyToken } from '@/lib/auth';
import { findProducts, createProduct } from '@/lib/repositories/product.repository';
import { findUserById } from '@/lib/repositories/user.repository';
import { query } from '@/lib/db';

// Helper function to generate a random rating between 3.5 and 5
const generateRandomRating = () => {
  return parseFloat((Math.random() * 1.5 + 3.5).toFixed(1));
};

// Helper to parse JSON fields with fallback
const tryParseJson = <T>(value: string | null | undefined, fallback: T): T => {
  if (!value) return fallback;
  try {
    return JSON.parse(value) as T;
  } catch (e) {
    return fallback;
  }
};

// Disable static generation for this route
export const dynamic = 'force-dynamic';

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const category = searchParams.get('category');
    const search = searchParams.get('search');
    const limit = parseInt(searchParams.get('limit') || '0');

    // Build SQL query conditions
    const whereClauses: string[] = [];
    const params: any[] = [];
    let paramIndex = 1;

    if (category) {
      whereClauses.push(`p.category = $${paramIndex++}`);
      params.push(category);
    }

    if (search) {
      whereClauses.push(`(p.name ILIKE $${paramIndex} OR p.description ILIKE $${paramIndex})`);
      params.push(`%${search}%`);
      paramIndex++;
    }

    const whereStr = whereClauses.length > 0 ? `WHERE ${whereClauses.join(' AND ')}` : '';

    const baseQuery = `
      FROM products p
      LEFT JOIN users u ON p.seller_id = u.id
    `;
    
    const countQuery = `SELECT COUNT(DISTINCT p.id) as total ${baseQuery} ${whereStr}`;
    const totalResult = await query(countQuery, params);
    const total = parseInt(totalResult.rows[0].total, 10);

    let productsQuery = `
      SELECT 
        p.*, 
        u.name as seller_name,
        (
          SELECT json_agg(json_build_object('url', pi.url, 'alt', p.name))
          FROM product_images pi
          WHERE pi.product_id = p.id
        ) as images
      ${baseQuery}
      ${whereStr}
      GROUP BY p.id, u.id
      ORDER BY p.created_at DESC
    `;

    if (limit > 0) {
      productsQuery += ` LIMIT $${paramIndex}`;
      params.push(limit);
    }

    const result = await query(productsQuery, params);
    const products = result.rows;

    // Transform products
    const transformedProducts = products.map((product: any) => ({
      id: product.id,
      name: product.name,
      description: product.description,
      price: product.price,
      category: product.category,
      stock: product.stock,
      rating: generateRandomRating(),
      reviewCount: Math.floor(Math.random() * 100) + 1,
      seller: {
        id: product.seller_id || '',
        name: product.seller_name || 'Unknown Seller',
      },
      images: product.images || [],
      specifications: tryParseJson<Record<string, string>>(
        product.specifications,
        {}
      ),
      createdAt: product.created_at,
      updatedAt: product.updated_at,
    }));

    return NextResponse.json({
      products: transformedProducts,
      total,
      limit: limit > 0 ? limit : undefined,
    });
  } catch (error) {
    console.error('Error fetching products:', error);
    return NextResponse.json(
      { error: 'Не удалось загрузить продукты' },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    // Verify authentication
    const token = request.headers.get('authorization')?.split(' ')[1];
    if (!token) {
      return NextResponse.json(
        { error: 'Требуется авторизация' },
        { status: 401 }
      );
    }

    const decoded = verifyToken(token);
    if (!decoded) {
      return NextResponse.json(
        { error: 'Недействительный токен' },
        { status: 401 }
      );
    }

    // Verify user exists and has seller role
    const user = await findUserById(decoded.id);

    if (!user) {
      return NextResponse.json(
        { error: 'Пользователь не найден' },
        { status: 404 }
      );
    }

    if (user.role !== 'SELLER' && user.role !== 'ADMIN') {
      return NextResponse.json(
        { error: 'Недостаточно прав для создания товара' },
        { status: 403 }
      );
    }

    const formData = await request.formData();
    const name = formData.get('name') as string;
    const description = formData.get('description') as string;
    const price = parseFloat(formData.get('price') as string);
    const category = formData.get('category') as string;
    const stock = parseInt(formData.get('stock') as string) || 0;
    const specifications = formData.get('specifications') as string;
    const images = formData.getAll('images') as File[];

    // Basic validation
    if (!name || !description || !price || !category) {
      return NextResponse.json(
        { error: 'Пожалуйста, заполните все обязательные поля' },
        { status: 400 }
      );
    }

    // Get the first image URL (in a real app, you'd upload the file first)
    const imageUrl = images.length > 0 ? `/uploads/${images[0].name}` : null;

    // Create product
    const product = await createProduct({
      name,
      description,
      price,
      category,
      stock,
      specifications,
      sellerId: user.id,
      image: imageUrl || '',
    });

    // In a real app, you would also handle the file upload here
    // and create records in the images table

    return NextResponse.json({
      success: true,
      message: 'Товар успешно создан',
      product: {
        ...product,
        image: product.image || null,
      },
    });
  } catch (error) {
    console.error('Error creating product:', error);
    return NextResponse.json(
      { error: 'Не удалось создать товар' },
      { status: 500 }
    );
  }
}
